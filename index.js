const { Telegraf, Markup } = require('telegraf');
const config = require('./config');
const fs = require('fs');
const { writeToCSV } = require('./utils/writecvs')
const bot = new Telegraf(config.telegramToken);
const forStates = require('./utils/forStates')
var inputMode = {};
var userProjects = {};
var namesProjChoise = {}
var currentTime = {}
var isDateToRevind = {}
const projects = ["entry.744013520", "entry.460071324", "entry.114962959", "entry.1174823241","entry.1315587285","entry.1271011164","entry.798682550","entry.529707128","entry.864116383","entry.1277828144","entry.648396435","entry.1609659424","entry.1958276645","entry.1624308407","entry.1731444995","entry.1817660369","entry.1286147655","entry.1631343816","entry.267764195","entry.548035864","entry.1290202242","entry.1682447098","entry.351380903","entry.1867198783","entry.839054733","entry.2029053668","entry.222491728","entry.435825602","entry.842585678","entry.349424234","entry.1532343057","entry.1546192729","entry.225131034","entry.1558092545","entry.923080069","entry.800611585","entry.570852682","entry.1792627242","entry.626348380","entry.272220642","entry.1550213116","entry.1832892167","entry.1491611559","entry.460562156","entry.983334088","entry.49608760","entry.673000119","entry.535142438","entry.604339736","entry.1541318123","entry.1768968497","entry.48700471","entry.1021887040","entry.1403719617"];
const projectsNames = ["–û—Ç–ø—É—Å–∫/–±–æ–ª—å–Ω–∏—á–Ω—ã–π/–æ—Ç–≥—É–ª","–ê–ª–∫–æ—Ä–∞–º–∫–∞-–ü—Ä–æ", "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ü-01", "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ü-02", "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ú","–ê–ª–∫–æ–∑–∞–º–æ–∫-–ú-–ü–†–û","–ê–ª–∫–æ–∑–∞–º–æ–∫-–ü-–ü–†–û","–í–û–õ–ó-0.9","–í–û–õ–ó-–°–ò","–ì–∞–∑–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä","–ò–í–õ/–ü–õ–í","–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π (–°–ò–ì–ù–ê–õ)","–ú-350 –ú–ê–ò","–ú-350 –£–£–ù–ò–¢","–ú-350 –£–ü–ö–ë","–ú-250 –£–ü–ö–ë","–ú-350 –ü–ù–ü–ü–ö","–ú-350 –ò–°–°","–ú-350 –°–∞–º–∞—Ä–∞","–º-350 –ü–ù–ò–ü–£","–ú-350 –¶–ê–¢","–ú-350 –¶–ê–¢-–û–°–ù–û–í–ê","–ú-350 –ö–ë–•–ê","–ú-450-–ú –£–ó–ì–ê","–ú-450-–ú –¢—É–ª–∞","–ú-450-–ú –°–∏–ª–æ–≤—ã–µ –º–∞—à–∏–Ω—ã","–ö–°–û","–õ—É—á-1","–û–±–ª–∞–∫–æ–º–µ—Ä (Skydex-15)","Skydex-9","–û–¥–∏—Å—Å–µ–π","–ü–í–õ 300 –ë–∞–π–∫–æ–Ω—É—Ä","–ü—Ä–æ–º–µ—Ç–µ–π","–ü—ã–ª—å","–†–µ–º–æ–Ω—Ç-–†–•–ë–ó","–°–∫–∞–Ω–µ—Ä –°–ü–ò–ù","–°–õ–ö","–£–°–°–û –°–µ—Ä–≤–∏—Å","109-–°–ö–ê–ù–ï–†-–î–ò–†–ï–ö–¢ –§1","109-–°–ö–ê–ù–ï–†-–î–ò–†–ï–ö–¢ –§2","109-–°–ö–ê–ù–ï–†-–¢–ï–†–†–ê","2136-–£–°–¢–ê–ù–û–í–ö–ê –ê–ú–ö-–ú-450","2136-–£–°–¢–ê–ù–û–í–ö–ê –ú-150","2136-–£–°–¢–ê–ù–û–í–ö–ê –ú-450","–°–õ–ú –ü–û-2.0","–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π","–î–µ—Ä–∂–∏–Ω–µ—Ü-1 –†–¢–ò","–†–∞–∑–≥–æ–Ω-–ü–ü–°","–†–∞–∑–≥–æ–Ω-–°–î–ò","–†–∞–∑–≥–æ–Ω-–°–ù","–†–∞–∑–≥–æ–Ω-–°–û","–†–∞–¥–∏–æ—Ñ–æ—Ç–æ–Ω–∏–∫–∞","–¢–µ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å", "–ü—Ä–æ—á–µ–µ"];

const monthNames = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
  };


bot.start(async (ctx) => {
    const users = await allUsers();
    const userId = ctx.from.id;
    const chatId = ctx.chat.id
    if(users[userId]) {
        if(!users[userId].auth) {
            try {
                if (ctx.callbackQuery.message) {
                    await ctx.deleteMessage();
                }
            } catch (err) {
                console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
            }
            sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
        }
    }
    
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    bot.telegram.sendMessage(chatId, `–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞`)
    const check = setInputMode(ctx, 'check')
    if (check) return
    if (users.hasOwnProperty(userId)) {
        ctx.reply(`–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.`, 
            Markup.inlineKeyboard([
                Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')
            ])
        );
        return;
    } else {
        ctx.reply(`–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ\n–ñ–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?`, 
            Markup.inlineKeyboard([
                Markup.button.callback('–î–∞', 'yesregister')
            ])
        );
        return;
    }
});
bot.action('editprofile', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const check = setInputMode(ctx, 'check')
    if(check) return
 // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if(!users.hasOwnProperty(userId)) return
    ctx.reply(`–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ ${users[userId].name}`, Markup.inlineKeyboard([
        [
            Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'changename'),
            Markup.button.callback('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'statMount'),
        ],
        [
            Markup.button.callback('‚ö†Ô∏è –û–ø–æ–≤–µ—â–µ–Ω–∏—è', 'alarms'),
            
        ],
        [
            Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu'),  
        ],
        
    ], 
    ));
});
bot.action('alarms', async (ctx) =>{
    let users = await allUsers();

    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    } // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    if(!users[userId].hasOwnProperty('alarms')) {
        users[userId] = { alarms: false }
        const jsonData = JSON.stringify(users, null, 2);
        fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
            }
        });
    }
    let alMessage
    let keyboard = [ ]
    if(users[userId].alarms.valueA) {
        if(users[userId].alarms.valueB) {
            alMessage = `‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã –ø–æ —É—Ç—Ä–∞–º (10:00)`
        } else {
            alMessage = `‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã –ø–æ –≤–µ—á–µ—Ä–∞–º (17:15)`
        }
        
        keyboard.push([Markup.button.callback('üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', 'offalarm'),])
    } else {
        alMessage = `üî¥ –û–ø–æ–≤–µ—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã`
        keyboard.push([Markup.button.callback('‚úÖ –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', 'onPrealarm'),])
    }

    keyboard.push([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu'),])
    ctx.reply(`–û–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –≤–∞–º –æ —Ç–æ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —É—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n${alMessage}`, Markup.inlineKeyboard(keyboard))
    
})
bot.action('onPrealarm', async(ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    let users = await allUsers();
    const userId = ctx.from.id;

    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    let keyboard = [[ Markup.button.callback('‚òÄÔ∏è –ü–æ —É—Ç—Ä–∞–º (10:00)', 'onalarmm'),], [ Markup.button.callback('üåï –ü–æ –≤–µ—á–µ—Ä–∞–º (17:15)', 'onalarmn'),]]
    ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:`, Markup.inlineKeyboard(keyboard))
})
bot.action('onalarmm', async(ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    let users = await allUsers();
    const userId = ctx.from.id;

    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    users[userId].alarms.valueA = true
    users[userId].alarms.valueB = true

    const jsonData = JSON.stringify(users, null, 2);
        fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
            }
        });
    ctx.reply(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã`, Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu'),]))
    
})
bot.action('onalarmn', async(ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    let users = await allUsers();
    const userId = ctx.from.id;

    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    users[userId].alarms.valueA = true
    users[userId].alarms.valueB = false

    const jsonData = JSON.stringify(users, null, 2);
        fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
            }
        });
    ctx.reply(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã`, Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu'),]))
    
})
bot.action('offalarm', async(ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    let users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    users[userId].alarms.valueA = false
    const jsonData = JSON.stringify(users, null, 2);
        fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
            }
        });
    ctx.reply(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã`, Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu'),]))
    
})
bot.action('changename', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const chatId = ctx.chat.id
    sendMessageAboutDataOrName(ctx, chatId, `–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É:\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`)
    setInputMode(ctx, 'name')
})
bot.action('mymenu', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    userProjects[userId] = []
    namesProjChoise = []
     // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    isDateToRevind[userId] = false
    const check = setInputMode(ctx, 'check')
    if(check) return
    const chatId = ctx.chat.id
    sendMessageForStart(chatId)
    
});
bot.action(`mymenunodelete`, async(ctx) => {
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    userProjects[userId] = []
    namesProjChoise = []
     // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    isDateToRevind[userId] = false
    const check = setInputMode(ctx, 'check')
    if(check) return
    const chatId = ctx.chat.id
    sendMessageForStart(chatId)
})
bot.on("message", async (ctx) => {
    console.log(`—Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`)
    const users = await allUsers()
    const userId = ctx.from.id;
    const check = setInputMode(ctx, 'formessage')
    if(!check) {
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
        return
    }
    const messageText = ctx.message.text;
    const words = messageText.trim().split(/\s+/);
    if (words.length === 3) {
        const name = formatName(ctx.message.text)
        writeDataName(userId, name);
        setInputMode(ctx, 'off')
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
        
        ctx.reply(`–ó–∞–ø–æ–º–Ω–∏–ª –≤–∞—Å –∫–∞–∫\n${name}`, 
            Markup.inlineKeyboard([
                Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')
            ])
        );
    } else if (isValidDate(messageText)) {
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
        if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
        if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
        setInputMode(ctx, 'off')
        const [day, month, year] = messageText.split('.').map(part => parseInt(part, 10));
        console.log(day,month,year)
        currentTime[userId] = { Y: year, M: month, D: day};
        if(await dataIsFull(ctx)) return ctx.reply('–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å', Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')]))
        const buttons = projectsNames.map((project, index) => [Markup.button.callback(`${index} - ${project}`, `project_${index}`)]);
        if(isDateToRevind[userId]){
            const userdata = await allUsers()
            const proj = userdata[userId].last
            const projectIndexes = proj.map(p => projects.indexOf(p));
            const extractedProjects = projectIndexes.map(index => projectsNames[index]);
            const exxxx = distributeHoursToCheck(projectsNames, extractedProjects)
            const selectedProjects = exxxx.map(proj => `‚òëÔ∏è ${proj}`).join('\n');  
            return ctx.reply(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.\n–§–æ—Ä–º–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.\n\n–î–∞—Ç–∞: ${currentTime[userId].D}.${currentTime[userId].M}.${currentTime[userId].Y}\n–ü—Ä–æ–µ–∫—Ç—ã: \n${selectedProjects}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n${userdata[userId].name}`, Markup.inlineKeyboard([Markup.button.callback('‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'senddata'), Markup.button.callback('‚ùå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')]));
        } 
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã', Markup.inlineKeyboard(buttons));
    } else {
        const chatId = ctx.chat.id
        sendErrorMessage(ctx, chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–º–µ–Ω–∏ –∏–ª–∏ –î–∞—Ç—ã')
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
    }
});
bot.action('yesregister', async (ctx) => {
    const chatId = ctx.chat.id
    const userId = ctx.from.id;
    console.log(chatId)
    console.log(userId)
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    
    setInputMode(ctx, 'name')
    let idsData = await readDataFunc('./userids.json')
    idsData[userId] = chatId
    saveDataFunc('./userids.json', idsData)
    sendMessageAboutDataOrName(ctx, chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É.\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
});
bot.action('yeschange', async (ctx) => {
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const chatId = ctx.chat.id
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    inputMode[ctx.from.id] = true;
    console.log(inputMode);
    sendMessageAboutDataOrName(ctx, chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É.\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
});
bot.action('settime', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const check = setInputMode(ctx, 'check')
    if(check) return
    
    

    const keyboard = [ 
        [
            Markup.button.callback('‚ú≥ –°–µ–≥–æ–¥–Ω—è', 'today'),
            Markup.button.callback('üìÖ –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'writetime'),
            
        ],
        [
            Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')

        ],
    ];
    let tex = ''
    if (users[userId].last) {
        tex = `\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–ö–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑" - –ü—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.`
        keyboard.push([
            
            Markup.button.callback('üîÅ –ö–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑', 'revind')
        ]);
    }

    ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å. ${tex}`, Markup.inlineKeyboard(keyboard));
});
bot.action('today', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
    const day = currentDate.getDate();
    currentTime[userId] = { Y: year, M: month, D: day}
    if(await dataIsFull(ctx)) return ctx.reply('–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å', Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')]))
    const buttons = projectsNames.map((project, index) => [Markup.button.callback(`${index} - ${project}`, `project_${index}`)]);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã', Markup.inlineKeyboard(buttons));
});
bot.action('writetime', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    
    const chatId = ctx.chat.id
    setInputMode(ctx, 'date')
    sendMessageAboutDataOrName(ctx, chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì", –Ω–∞–ø—Ä–∏–º–µ—Ä "01.01.2024".')
});
bot.action('revind', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const userId = ctx.from.id;
    const userdata = await allUsers()
    if(!userdata[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!userdata[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
    const day = currentDate.getDate();
    const proj = userdata[userId].last
    const projectIndexes = proj.map(p => projects.indexOf(p));
    const extractedProjects = projectIndexes.map(index => projectsNames[index]);
    const exxxx = distributeHoursToCheck(projectsNames, extractedProjects)
    const selectedProjects = exxxx.map(proj => `‚òëÔ∏è ${proj}`).join('\n'); 
    currentTime[userId] = { Y: year, M: month, D: day}
    const keyboard = [
        Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', 'changedata'),
        Markup.button.callback('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'senddata'),
        Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')
    ]
    ctx.reply(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.\n–§–æ—Ä–º–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.\n\n–î–∞—Ç–∞: ${day}.${month}.${year}\n–ü—Ä–æ–µ–∫—Ç—ã: \n${selectedProjects}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n${userdata[userId].name}`,Markup.inlineKeyboard(keyboard));
})
bot.action('changedata', async (ctx) => {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id
    const users = await allUsers();
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    
        try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    setInputMode(ctx, 'date')
    isDateToRevind[userId] = true
    sendMessageAboutDataOrName(ctx, chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì", –Ω–∞–ø—Ä–∏–º–µ—Ä "01.01.2024".')

})
bot.action('senddata', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    if(await dataIsFull(ctx)) return ctx.reply('–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å', Markup.inlineKeyboard([Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')]))
    const chatId = ctx.chat.id
    isDateToRevind[userId] = false
    const userdata = await allUsers()
    userProjects[userId] = userdata[userId].last
    ctx.reply(`–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ ${currentTime[userId].D}.${currentTime[userId].M}.${currentTime[userId].Y}`)
    sendForm(userId, chatId)
})

projectsNames.forEach((project, index) => {
    bot.action(`project_${index}`, async (ctx) => {
        const users = await allUsers();
        const userId = ctx.from.id;
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
        if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
        if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
        
        console.log(project, index)
         // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!userProjects[userId]) {
            userProjects[userId] = [];
        }
        const targetToDeleteFromUserProjects = projects[index]
        if(userProjects[userId].includes(targetToDeleteFromUserProjects)) {
            userProjects[userId] = userProjects[userId].filter(item => item !== targetToDeleteFromUserProjects);
        } else {
            userProjects[userId].push(projects[index]);
        }

        const targetToDeleteFromNamesProjChoise = projectsNames[index]
        console.log(targetToDeleteFromNamesProjChoise)
        if(!namesProjChoise[userId]) {
            namesProjChoise[userId] = []
        }
        if(namesProjChoise[userId].includes(targetToDeleteFromNamesProjChoise)) {
            namesProjChoise[userId] = namesProjChoise[userId].filter(item => item !== targetToDeleteFromNamesProjChoise);
        } else {
            namesProjChoise[userId].push(project)
        }
        const exxx = distributeHoursToCheck(projectsNames, namesProjChoise[userId])
        const selectedProjects = exxx.map(proj => `‚òëÔ∏è ${proj}`).join('\n'); 

        ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç: ${project}\n–í—Å–µ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏:\n${selectedProjects}\n\n–í—Å–µ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ ${userProjects[userId]}`, 
            Markup.inlineKeyboard([
                Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–µ–∫—Ç', 'add_more_projects'),
                Markup.button.callback('–ì–æ—Ç–æ–≤–æ', 'done'),
                Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')
            ])
        );
    });
});
bot.action('add_more_projects', async (ctx) => {
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`) 
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
    const buttons = projectsNames.map((project, index) => [Markup.button.callback(`${index} - ${project}`, `project_${index}`)]);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã', Markup.inlineKeyboard(buttons));
});
bot.action('done', async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const chatId = ctx.chat.id
     // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!userProjects[userId] || userProjects[userId].length === 0) {
        return ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    ctx.reply(`–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ ${currentTime[userId].D}.${currentTime[userId].M}.${currentTime[userId].Y}.`);
    sendForm(userId, chatId);
    
});
function getDayOfWeek(day, month) {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã
    const date = new Date(2024, month - 1, day);
    
    // –ú–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const daysOfWeek = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ üìå", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    const dayOfWeek = date.getDay();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    return `${day} ${daysOfWeek[dayOfWeek]}`;
}
bot.action(/date_\d+/, async (ctx) => {
    try {
        if (ctx.callbackQuery.message) {
            await ctx.deleteMessage();
        }
    } catch (err) {
        console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    }
    const users = await allUsers();
    const userId = ctx.from.id;
    if(!users[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!users[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
    const monthIndex = parseInt(ctx.match[0].split('_')[1]); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞ –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    const monthName = monthNames[monthIndex]; // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ monthNames
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–µ—Å—è—Ü: ${monthName}, ${monthIndex}`);
    const userDataAll = await allUsers();
    const selectedProjects = userDataAll[userId].stat['2024'][monthIndex].map(proj => `‚òëÔ∏è ${getDayOfWeek(proj, monthIndex)}`).join('\n'); 
    const keyboard = [
        [
            Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu'), Markup.button.callback('‚¨áÔ∏è –ù–µ —É–¥–∞–ª—è—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è', 'mymenunodelete')
        ]
    ];
    ctx.sendMessage(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${monthName}\n\n–î–∞—Ç—ã:\n${selectedProjects}`, Markup.inlineKeyboard(keyboard));
    // –î–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å monthIndex –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
});

bot.action('statMount', async (ctx) => {
    const userId = ctx.from.id;
    const userDataAll = await allUsers();

    if(!userDataAll[userId]) return sendErrorMessage(ctx, `–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã.`)
    if(!userDataAll[userId].auth) return sendErrorMessage(ctx, `–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ —Å—é–¥–∞ @bandomas`)
        try {
            if (ctx.callbackQuery.message) {
                await ctx.deleteMessage();
            }
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
        }
    if(!userDataAll[userId].hasOwnProperty('stat')) return  sendErrorMessage(ctx, '–í—ã –µ—â—ë –Ω–∏ —Ä–∞–∑—É –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —Ñ–æ—Ä–º—É.')
    const months = Object.keys(userDataAll[userId].stat['2024']);
    const monthNamesArray = months.map(month => monthNames[parseInt(month)]);
    const keyboard = [
        [
            Markup.button.callback('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mymenu')
        ]
    ];
    if (userDataAll[userId].stat) {
        monthNamesArray.forEach((name, id) => {
            keyboard.push([Markup.button.callback(`${name}`, `date_${months[id]}`)]);
            bot.action(`date_${months[id]}`, async (ctx, next) => {
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–µ—Å—è—Ü: ${name}`);
                // –î–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å months[id] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return next();
            }, async (ctx) => {});
        });
    }
    ctx.sendMessage(`–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü`, Markup.inlineKeyboard(keyboard));
});



bot.launch();


async function allUsers() {
    return new Promise((resolve, reject) => {
        fs.readFile('users.json', 'utf8', (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            try {
                const users = JSON.parse(data);
                resolve(users);
            } catch (error) {
                reject(error);
            }
        });
    });
}
async function readDataFunc(filename) {
    return new Promise((resolve, reject) => {
        fs.readFile(filename, 'utf8', (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            try {
                const users = JSON.parse(data);
                resolve(users);
            } catch (error) {
                reject(error);
            }
        });
    });
}
async function saveDataFunc(filename, data) {
    const jsonData = JSON.stringify(data, null, 2);
    fs.writeFile(filename, jsonData, 'utf8', (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
        }
    });

}










/*function sendForm(year, month, day, userName) {
    const GoogleURL = 'https://docs.google.com/forms/d/e/1FAIpQLSdikzcL-InKRw_lbmpTysxtwQx0Wb7l8F2fROJkJiaNyCNp7A/formResponse';
    const urlReferer = 'https://docs.google.com/forms/d/e/1FAIpQLSdikzcL-InKRw_lbmpTysxtwQx0Wb7l8F2fROJkJiaNyCNp7A/viewform';
    let formData = new FormData();
    formData.append('entry.210931804_year', `${year}`);
    formData.append('entry.210931804_month', `${month}`);
    formData.append('entry.210931804_day', `${day}`);
    formData.append('entry.1970048429', `${userName}`); // –ò–º—è
    formData.append('entry.1036971134', `–ù–µ—Ç`);
    formData.append('entry.744013520', ``); // –ì–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
    formData.append('entry.460071324', ``); // –û—Ç–ø—É—Å–∫ –±–æ–ª—å–Ω–∏—á–Ω—ã–π
    distributeHours(projects, userProjects[userId]);
    formData.append('entry.172335038', ``); // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    fetch(GoogleURL, {
        method: 'POST',
        headers: {
            'Referer': urlReferer
        },
        body: formData
    }).then(response => {
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', response);
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    });
}
*/
const distributeHours = async (projects, pon, totalHours = 8, formData) => {
    let projectsCount = pon.length;
    let hoursPerProject = [];
    let remainingHours = totalHours;
    let forReturn = []
    for (let i = 0; i < projectsCount; i++) {
        let hours = Math.floor(remainingHours / (projectsCount - i) * 2) / 2; // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 0.5
        hoursPerProject.push(hours);
        remainingHours -= hours;
    }

    let hoursMap = {};
    pon.forEach((projectId, index) => {
        hoursMap[projectId] = hoursPerProject[index];
    });

    projects.forEach((projectId) => {
        if (hoursMap[projectId] !== undefined) {
            let hoursString = hoursMap[projectId].toString().replace('.', ',');
            //formData.append(`entry.${projectId}`, `${hoursString}`);
            forReturn.push(`${projectId}-${hoursString}`)
            console.log(`entry.${projectId}, ${hoursString}`);
        } else {
            //formData.append(`entry.${projectId}`, ``);
            forReturn.push(`${projectId}-`)
            console.log(`entry.${projectId}`);
        }
    });
    return forReturn
};

const distributeHoursToCheck = (projects, pon, totalHours = 8) => { //(–≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã)
    let projectsCount = pon.length;
    let hoursPerProject = [];
    let remainingHours = totalHours;
    let toReturn = []

    for (let i = 0; i < projectsCount; i++) {
        let hours = Math.floor(remainingHours / (projectsCount - i) * 2) / 2; // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 0.5
        hoursPerProject.push(hours);
        remainingHours -= hours;
    }

    let hoursMap = {};
    pon.forEach((projectId, index) => {
        hoursMap[projectId] = hoursPerProject[index];
    });

    projects.forEach((projectId) => {
        if (hoursMap[projectId] !== undefined) {
            toReturn.push(`${projectId} ${hoursMap[projectId]} —á.`)
        }
    });
    return toReturn

};
const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/
function isValidDate(text) {
    return dateRegex.test(text);
}


/*
bot.telegram.sendMessage('586416050', 'lol', Markup.inlineKeyboard([
    Markup.button.callback('–î–∞', 'yesregister'),
    Markup.button.callback('–ù–µ—Ç', 'noregister')
]))
*/
function sendMessageForStart(id) {

    const keyboard = [
        [
            Markup.button.callback('üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è', 'settime'),
            Markup.button.callback('üßç –ü—Ä–æ—Ñ–∏–ª—å', 'editprofile')
        ]
    ]
    bot.telegram.sendMessage(id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard(keyboard))
}
sendMessageForStart('586416050')

const formatName = (name) => {
    return name.toLowerCase().replace(/(^|\s)\S/g, (letter) => letter.toUpperCase());
};

function setInputMode(ctx, type) {
    const chatId = ctx.chat.id 
    const userId = ctx.from.id;
    if (!inputMode[userId]) {
        inputMode[userId] = {};
    }
    if (inputMode[userId].inputName) {
        console.log(`–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. [ ${inputMode[userId].inputName} ]`)
        if(type === 'formessage') return true
        if(type === 'off') return inputMode[userId].inputName = false
        sendMessageAboutDataOrName(ctx, chatId, `–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É:\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`)
        return true;
    }

    if (inputMode[userId].inputDate) {
        console.log(`–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã. [ ${inputMode[userId].inputDate} ]`)
        if(type === 'formessage') return true
        if(type === 'off') return inputMode[userId].inputDate = false
        sendMessageAboutDataOrName(ctx, chatId, `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É\n\n–ü—Ä–∏–º–µ—Ä:\n01.01.2024`)
        return true;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ inputName –∏ inputDate
    if (!inputMode[userId].hasOwnProperty('inputName')) {
        inputMode[userId].inputName = false;
    } 
    if (!inputMode[userId].hasOwnProperty('inputDate')) {
        inputMode[userId].inputDate = false;
    }
    inputMode[userId].inputName = false;
    inputMode[userId].inputDate = false;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
        case 'name':
            inputMode[userId].inputName = true;
            break;
        case 'date':
            inputMode[userId].inputDate = true;
            break;
        case 'off':
            break;
        case 'check':
            return false 
        default:
            console.log('ok');
    }
}

function sendErrorMessage(ctx, message) {
    const chatId = ctx.chat.id
    const sentMessagePromise = ctx.reply(`–û—à–∏–±–∫–∞:\n\n${message}`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(async () => {
        try {
            const sentMessage = await sentMessagePromise;
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.telegram.deleteMessage(chatId, sentMessage.message_id);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    }, 5000)
}
function sendMessageAboutDataOrName(ctx, chatId, message) {
    const sentMessagePromise = ctx.reply(`${message}`);
    setTimeout(async () => {
        try {
            const sentMessage = await sentMessagePromise;
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.telegram.deleteMessage(chatId, sentMessage.message_id);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    }, 15000)
}

async function saveData(userId, data) {
    const userDataAll = await allUsers();
    const lol = forStates.saveData(userDataAll[userId], currentTime[userId].D, currentTime[userId].M, currentTime[userId].Y)
    if (userDataAll[userId]) {
        userDataAll[userId] = lol
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        userDataAll[userId] = lol;
    }
    const jsonData = JSON.stringify(userDataAll, null, 2);
    fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
        }
    });
}
const pon1 = {
    '12312': {
        'stat': {
            '': ['12.04.2024']
        }
    }
}
console.log(pon1[12312].stat)
async function writeDataChatIds() {
    
}
async function writeDataName(user, data) {
    const userDataAll = await allUsers();

    if (userDataAll[user]) {
        userDataAll[user].name = data;
        userDataAll[user].auth = false
        

    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        userDataAll[user] = { name: data, auth: false, alarms: { valueA: false, valueB: false} };
    }
    const jsonData = JSON.stringify(userDataAll, null, 2);
    fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
        }
    });
}

async function writeDataLast(user, data) {
    const userDataAll = await allUsers();

    if (userDataAll[user]) {
        userDataAll[user].last = data;
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        userDataAll[user] = { name: data };
    }
    
    const jsonData = JSON.stringify(userDataAll, null, 2);
    fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
        }
    });
}

async function sendForm(userId, chatId) {

    /////////
    const userName = await allUsers()

    const GoogleURL = 'https://docs.google.com/forms/d/e/1FAIpQLSfSPUBT1aRn8tOCIfUibKu3efrWj5YgZcwF5zzCVM_YCL2Dag/formResponse';
    const urlReferer = 'https://docs.google.com/forms/d/e/1FAIpQLSfSPUBT1aRn8tOCIfUibKu3efrWj5YgZcwF5zzCVM_YCL2Dag/viewform';
    let formData = new FormData();
    formData.append('entry.210931804_year', `${currentTime[userId].Y}`);
    formData.append('entry.210931804_month', `${currentTime[userId].M}`);
    formData.append('entry.210931804_day', `${currentTime[userId].D}`);
    formData.append('entry.1970048429', `${userName[userId].name}`); //–§–ò–û
    formData.append('entry.1036971134', `–ù–µ—Ç`); //–í—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ?
    formData.append('entry.172656762', ``); // –ì–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
    //formData.append('entry.744013520', ``); // –û—Ç–ø—É—Å–∫ –±–æ–ª—å–Ω–∏—á–Ω—ã–π
    const formatHour = await distributeHours(projects, userProjects[userId], undefined, formData);
    formatHour.forEach(function(element) {
        const [firstPart, secondPart] = splitString(element);
        formData.append(`${firstPart}`, `${secondPart}`);
    });
    formData.append('entry.172335038', ``); // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    
    console.log(formData)
    fetch(GoogleURL, {
        method: 'POST',
        headers: {
            'Referer': urlReferer
        },
        body: formData
    }).then(response => {
        console.log('–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:', response.status);
        if(response.status == 200) {
            bot.telegram.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—à–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.`)
        } else {
            bot.telegram.sendMessage(chatId, `–û–®–ò–ë–ö–ê! ${response.status}\n\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Å–∞–π—Ç\n\nhttps://docs.google.com/forms/d/e/1FAIpQLSfSPUBT1aRn8tOCIfUibKu3efrWj5YgZcwF5zzCVM_YCL2Dag/viewform`)
        }
        
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: response');
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    });
    await writeDataLast(userId, userProjects[userId])
    const forSaveData = { [currentTime[userId].Y]: {
            [currentTime[userId].M]: [ currentTime[userId].D ]
        } 
    }
    await saveData(userId, forSaveData)
    const time = getFormatedTime()

    writeToCSV({
        Time: time,
        Projectid: userProjects[userId],
        Projectname: ``,
        date: `${currentTime[userId].D}.${currentTime[userId].M}.${currentTime[userId].Y}`,

    });
    userProjects[userId] = []
    namesProjChoise[userId] = []
    sendMessageForStart(chatId)

    
}
function splitString(inputString) {
    // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –¥–µ—Ñ–∏—Å—É
    let words = inputString.split('-');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π
    if (words.length >= 2) {
        return words;
    } else {
        return [inputString, ''];
    }
}


async function dataIsFull(ctx) {
    const userDataAll = await allUsers();
    const userId = ctx.from.id;
    currentTime[userId]
    if(!userDataAll[userId].stat) return false
    if(!userDataAll[userId].stat[currentTime[userId].Y]) return false
    if(!userDataAll[userId].stat[currentTime[userId].Y][currentTime[userId].M]) return false
    if(userDataAll[userId].stat[currentTime[userId].Y][currentTime[userId].M].includes(currentTime[userId].D)){
        return true
    } else {
        return false
    }

}

const getFormatedTime = () => {
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = ("0" + (currentDate.getMonth() + 1)).slice(-2);
    const day = ("0" + currentDate.getDate()).slice(-2);
    const hours = ("0" + currentDate.getHours()).slice(-2);
    const minutes = ("0" + currentDate.getMinutes()).slice(-2);
    const seconds = ("0" + currentDate.getSeconds()).slice(-2);

    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
};






async function getAllUsersWithAlarms() {
    const allUsersData = await allUsers();

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö alarms.valueA = true, –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Ö ID
    const usersWithAlarms = Object.keys(allUsersData).filter(userId => allUsersData[userId].alarms.valueA === true);

    return usersWithAlarms;
}


async function checkTime() {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();

    if (hours === 10 && minutes === 0) {
        const year = now.getFullYear();
        const month = now.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
        const day = now.getDate();
        const userDataAll = await allUsers();
        const UsersIds = await getAllUsersWithAlarms()
        UsersIds.forEach((element) => {
            if(!userDataAll[element].hasOwnProperty(`stat`)) return bot.telegram.sendMessage(element, `–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —É—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å!!`)
            if(userDataAll[element].stat[year][month].includes(day)) return
            if(userDataAll[element].alarms.valueB === true) return bot.telegram.sendMessage(element, `–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —É—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å!`)
        })
        console.log('It is 10:00 AM');
    } else if (hours === 17 && minutes === 15) {
        const year = now.getFullYear();
        const month = now.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
        const day = now.getDate();
        const userDataAll = await allUsers();
        const UsersIds = await getAllUsersWithAlarms()
        UsersIds.forEach((element) => {
            if(!userDataAll[element].hasOwnProperty(`stat`)) return bot.telegram.sendMessage(element, `–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —É—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å!!!`)
            if(userDataAll[element].stat[year][month].includes(day)) return
            if(userDataAll[element].alarms.valueB === false) return bot.telegram.sendMessage(element, `–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —É—á—ë—Ç —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å! !`)
        })
        console.log('It is 17:01 PM');
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(checkTime, 60 * 1000);

// –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
checkTime();
