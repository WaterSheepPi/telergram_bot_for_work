const { Telegraf, Markup } = require('telegraf');
const config = require('./config');
const fs = require('fs');
const bot = new Telegraf(config.telegramToken);
var inputMode = {};
var userProjects = {};
var namesProjChoise = {}
var currentTime = {}
const projects = ["entry.114962959", "entry.1174823241", "entry.1315587285", "entry.1271011164", "entry.798682550", "entry.529707128", "entry.864116383", "entry.1277828144", "entry.648396435", "entry.1609659424", "entry.1958276645", "entry.1624308407", "entry.1731444995", "entry.1817660369", "entry.1286147655", "entry.1631343816", "entry.267764195", "entry.548035864", "entry.1290202242", "entry.1682447098", "entry.351380903", "entry.1867198783", "entry.839054733", "entry.2029053668", "entry.222491728", "entry.435825602", "entry.842585678", "entry.349424234", "entry.1532343057", "entry.1546192729", "entry.225131034", "entry.1558092545", "entry.923080069", "entry.800611585", "entry.570852682", "entry.1792627242", "entry.626348380", "entry.272220642", "entry.1550213116", "entry.1832892167", "entry.1491611559", "entry.460562156", "entry.983334088", "entry.49608760", "entry.673000119", "entry.535142438", "entry.604339736", "entry.1541318123", "entry.1768968497", "entry.48700471", "entry.1021887040", "entry.1403719617", "entry.172656762"];
const projectsNames = [
    "–ê–ª–∫–æ—Ä–∞–º–∫–∞-–ü—Ä–æ",
    "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ü-01",
    "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ü-02",
    "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ú",
    "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ú-PRO",
    "–ê–ª–∫–æ–∑–∞–º–æ–∫-–ü-PRO",
    "–í–û–õ–ó-0.9",
    "–í–û–õ–ó-–°–ò",
    "–ì–∞–∑–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä",
    "–ò–í–õ/–ü–õ–í",
    "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π (–°–ò–ì–ù–ê–õ)",
    "–ú-350 –ú–ê–ò",
    "–ú-350 –£–£–ù–ò–¢",
    "–ú-350 –£–ü–ö–ë",
    "–ú-250 –£–ü–ö–ë",
    "–ú-350 –ü–ù–ü–ü–ö",
    "–ú-350 –ò–°–°",
    "–ú-350 –°–∞–º–∞—Ä–∞",
    "–ú-350 –ü–ù–ò–ü–£",
    "–ú-350 –¶–ê–¢",
    "–ú-350 –¶–ê–¢-–û–°–ù–û–í–ê",
    "–ú-350 –ö–ë–•–ê",
    "–ú-450-–ú –£–ó–ì–ê",
    "–ú-450-–ú –¢—É–ª–∞",
    "–ú-450-–ú –°–∏–ª–æ–≤—ã–µ –º–∞—à–∏–Ω—ã",
    "–ö–°–û",
    "–õ—É—á-1",
    "–û–±–ª–∞–∫–æ–º–µ—Ä (Skydex-15)",
    "Skydex-9",
    "–û–¥–∏—Å—Å–µ–π",
    "–ü–õ–í-300 –ë–∞–π–∫–æ–Ω—É—Ä",
    "–ü—Ä–æ–º–µ—Ç–µ–π",
    "–ü—ã–ª—å",
    "–†–µ–º–æ–Ω—Ç-–†–•–ë–ó",
    "–°–∫–∞–Ω–µ—Ä –°–ü–ò–ù",
    "–°–õ–ö",
    "–£–°–°–û –°–µ—Ä–≤–∏—Å",
    "109-–°–ö–ê–ù–ï–†-–î–ò–†–ï–ö–¢ –§1",
    "109-–°–ö–ê–ù–ï–†-–î–ò–†–ï–ö–¢ –§2",
    "109-–°–ö–ê–ù–ï–†-–¢–ï–†–†–ê",
    "2136-–£–°–¢–ê–ù–û–í–ö–ê –ê–ú–ö-–ú-450",
    "2136-–£–°–¢–ê–ù–û–í–ö–ê –ú-150",
    "2136-–£–°–¢–ê–ù–û–í–ö–ê –ú-450",
    "–°–õ–ú –ü–û-2.0",
    "–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π",
    "–î–µ—Ä–∂–∏–Ω–µ—Ü-1 –†–¢–ò",
    "–†–∞–∑–≥–æ–Ω-–ü–ü–°",
    "–†–∞–∑–≥–æ–Ω-–°–î–ò",
    "–†–∞–∑–≥–æ–Ω-–°–ù",
    "–†–∞–∑–≥–æ–Ω-–°–û",
    "–†–∞–¥–∏–æ—Ñ–æ—Ç–æ–Ω–∏–∫–∞",
    "–¢–µ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å",
    "–ü—Ä–æ—á–µ–µ"
];

bot.start(async (ctx) => {
    const users = await allUsers();
    console.log(users);
    const userId = ctx.from.id;
    console.log(userId);
    if (userId in inputMode) return ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É.\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`);
    if (users.hasOwnProperty(userId)) {
        ctx.reply(`–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º ${users[userId].name}\n–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`, 
            Markup.inlineKeyboard([
                Markup.button.callback('üë§ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å', 'yeschange'),
                Markup.button.callback('üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è', 'settime')
            ])
        );
        return;
    } else {
        ctx.reply(`–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ\n–ñ–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?`, 
            Markup.inlineKeyboard([
                Markup.button.callback('–î–∞', 'yesregister'),
                Markup.button.callback('–ù–µ—Ç', 'noregister')
            ])
        );
        return;
    }
});

bot.on("message", (ctx) => {
    const userId = ctx.from.id;
    if (userId in inputMode) {
        // –ó–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞
    } else {
        return ctx.reply(`–°–µ–π—á–∞—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.`);
    }
    const messageText = ctx.message.text;
    const words = messageText.trim().split(/\s+/);
    if (words.length === 3) {
        const name = ctx.message.text.toUpperCase();
        writeDataName(userId, name);
        delete inputMode[userId];
        ctx.deleteMessage();
        
        ctx.reply(`–ó–∞–ø–æ–º–Ω–∏–ª –≤–∞—Å –∫–∞–∫\n${name}`, 
            Markup.inlineKeyboard([
                Markup.button.callback('üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è', 'settime')
            ])
        );
    } else if (isValidDate(messageText)) {
        delete inputMode[userId];
        const [day, month, year] = messageText.split('.').map(part => parseInt(part, 10));
        console.log(day,month,year)
        currentTime[userId] = { Y: year, M: month, D: day};
        const buttons = projectsNames.map((project, index) => [Markup.button.callback(`${index} - ${project}`, `project_${index}`)]);
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã', Markup.inlineKeyboard(buttons));
    } else {
        ctx.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ –¥–∞—Ç—ã`);
    }
});


bot.action('yesregister', (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    inputMode[ctx.from.id] = true;
    console.log(inputMode);
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É.\–Ω–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á');
});

bot.action('yeschange', (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    inputMode[ctx.from.id] = true;
    console.log(inputMode);
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É.\–Ω–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á');
});

bot.action('settime', async (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const users = await allUsers();
    const userId = ctx.from.id;

    const keyboard = [
        [
            Markup.button.callback('–°–µ–≥–æ–¥–Ω—è', 'today'),
            Markup.button.callback('–í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'writetime')
        ]
    ];
    let tex = ''
    if (users[userId].last) {
        tex = `\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–ö–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑" - –ü—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.`
        keyboard.push([
            Markup.button.callback('–ö–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑', 'revind')
        ]);
    }

    ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å. ${tex}`, Markup.inlineKeyboard(keyboard));
});


bot.action('today', async (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const users = await allUsers();
    const userId = ctx.from.id;
    const currentDate = new Date();

    const year = currentDate.getFullYear();
    const month = currentDate.getMonth() + 1; // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 1
    const day = currentDate.getDate();
    currentTime[userId] = { Y: year, M: month, D: day}
    const buttons = projectsNames.map((project, index) => [Markup.button.callback(`${index} - ${project}`, `project_${index}`)]);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã', Markup.inlineKeyboard(buttons));
});
bot.action('writetime', (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    inputMode[ctx.from.id] = true;
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì", –Ω–∞–ø—Ä–∏–º–µ—Ä "01.01.2024".');
});
bot.action('revind', (ctx) => {
    ctx.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.\n–§–æ—Ä–º–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.\n–î–∞—Ç–∞:');
})


projectsNames.forEach((project, index) => {
    bot.action(`project_${index}`, (ctx) => {
        ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const userId = ctx.from.id;
        if (!userProjects[userId]) {
            userProjects[userId] = [];
        }
        userProjects[userId].push(projects[index]);
        if (namesProjChoise[userId]) {
            namesProjChoise[userId].push(project)
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
            namesProjChoise[userId] = [];
            namesProjChoise[userId].push(project)
        }
        const selectedProjects = namesProjChoise[userId].map(proj => `‚òëÔ∏è ${proj}`).join('\n'); 

        ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç: ${project}\n–í—Å–µ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏:\n${selectedProjects}\n\n–í—Å–µ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ ${userProjects[userId]}`, 
            Markup.inlineKeyboard([
                Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–µ–∫—Ç', 'add_more_projects'),
                Markup.button.callback('–ì–æ—Ç–æ–≤–æ', 'done')
            ])
        );
    });
});

bot.action('add_more_projects', (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const buttons = projectsNames.map((project, index) => [Markup.button.callback(`${index} - ${project}`, `project_${index}`)]);
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã', Markup.inlineKeyboard(buttons));
});

bot.action('done', (ctx) => {
    ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userId = ctx.from.id;
    if (!userProjects[userId] || userProjects[userId].length === 0) {
        return ctx.reply('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    sendForm(userId);
    ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
});

bot.launch();

function allUsers() {
    return new Promise((resolve, reject) => {
        fs.readFile('users.json', 'utf8', (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            try {
                const users = JSON.parse(data);
                resolve(users);
            } catch (error) {
                reject(error);
            }
        });
    });
}

async function writeDataName(user, data) {
    const userDataAll = await allUsers();

    if (userDataAll[user]) {
        userDataAll[user].name = data;
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        userDataAll[user] = { name: data };
    }
    const jsonData = JSON.stringify(userDataAll, null, 2);
    fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
        }
    });
}
async function writeDataLast(user, data) {
    const userDataAll = await allUsers();

    if (userDataAll[user]) {
        userDataAll[user].last = data;
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        userDataAll[user] = { name: data };
    }
    const jsonData = JSON.stringify(userDataAll, null, 2);
    fs.writeFile('./users.json', jsonData, 'utf8', (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        } else {
            console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª.');
        }
    });
}

async function sendForm(userId) {
    const userName = await allUsers()
    const GoogleURL = 'https://docs.google.com/forms/d/e/1FAIpQLSdikzcL-InKRw_lbmpTysxtwQx0Wb7l8F2fROJkJiaNyCNp7A/formResponse';
    const urlReferer = 'https://docs.google.com/forms/d/e/1FAIpQLSdikzcL-InKRw_lbmpTysxtwQx0Wb7l8F2fROJkJiaNyCNp7A/viewform';
    let formData = new FormData();
    console.log(`–ì–æ–¥ ` + currentTime[userId].Y)
    console.log(`–ú–µ—Å—è—Ü ` + currentTime[userId].M)
    console.log(`–î–µ–Ω—å ` + currentTime[userId].D)
    console.log(`entry.1970048429 ` + userName[userId].name)
    distributeHours(projects, userProjects[userId]);
    console.log(`entry.172335038 ` + ``)
    writeDataLast(userId, userProjects[userId])
}








/*function sendForm(year, month, day, userName) {
    const GoogleURL = 'https://docs.google.com/forms/d/e/1FAIpQLSdikzcL-InKRw_lbmpTysxtwQx0Wb7l8F2fROJkJiaNyCNp7A/formResponse';
    const urlReferer = 'https://docs.google.com/forms/d/e/1FAIpQLSdikzcL-InKRw_lbmpTysxtwQx0Wb7l8F2fROJkJiaNyCNp7A/viewform';
    let formData = new FormData();
    formData.append('entry.210931804_year', `${year}`);
    formData.append('entry.210931804_month', `${month}`);
    formData.append('entry.210931804_day', `${day}`);
    formData.append('entry.1970048429', `${userName}`); // –ò–º—è
    formData.append('entry.1036971134', `–ù–µ—Ç`);
    formData.append('entry.744013520', ``); // –ì–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
    formData.append('entry.460071324', ``); // –û—Ç–ø—É—Å–∫ –±–æ–ª—å–Ω–∏—á–Ω—ã–π
    distributeHours(projects, userProjects[userId]);
    formData.append('entry.172335038', ``); // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    fetch(GoogleURL, {
        method: 'POST',
        headers: {
            'Referer': urlReferer
        },
        body: formData
    }).then(response => {
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', response);
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    });
}
*/
const distributeHours = (projects, pon, totalHours = 8) => {
    let projectsCount = pon.length;
    let hoursPerProject = [];
    let remainingHours = totalHours;

    for (let i = 0; i < projectsCount; i++) {
        let hours = Math.floor(remainingHours / (projectsCount - i) * 2) / 2; // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 0.5
        hoursPerProject.push(hours);
        remainingHours -= hours;
    }

    let hoursMap = {};
    pon.forEach((projectId, index) => {
        hoursMap[projectId] = hoursPerProject[index];
    });

    projects.forEach((projectId) => {
        if (hoursMap[projectId] !== undefined) {
            //formData.append(`entry.${projectId}`, `${hoursMap[projectId]}`);
            console.log(`entry.${projectId}, ${hoursMap[projectId]}`);
        } else {
            //formData.append(`entry.${projectId}`, ``);
            console.log(`entry.${projectId}`);
        }
    });
};
const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/
function isValidDate(text) {
    return dateRegex.test(text);
}